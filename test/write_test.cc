// Copyright 2017 Tommy Hinks
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <gtest/gtest.h>

#include "../include/thinks/obj_io.h"

#include <algorithm>
#include <sstream>
#include <string>
#include <vector>

using std::begin;
using std::end;
using std::for_each;
using std::invalid_argument;
using std::string;
using std::stringstream;
using std::vector;
using thinks::obj_io::make_normal_channel;
using thinks::obj_io::make_position_channel;
using thinks::obj_io::make_tex_coord_channel;
using thinks::obj_io::Write;

namespace {

struct Mesh
{
  vector<float> position_components;
  vector<uint32_t> position_indices;
  uint32_t position_components_per_vertex;
  uint32_t position_indices_per_face;

  vector<float> tex_coord_components;
  vector<uint32_t> tex_coord_indices;
  uint32_t tex_coord_components_per_vertex;
  uint32_t tex_coord_indices_per_face;

  vector<float> normal_components;
  vector<uint32_t> normal_indices;
  uint32_t normal_indices_per_face;
};

/// Returns a mesh with:
/// -  8 * 3 position elements 
/// - 12 * 3 position index elements
/// -  4 * 2 tex coord elements
/// - 12 * 3 tex coord indices
/// -  6 * 3 normal elements
/// - 12 * 3 normal indices
///
/// Centered at origin, positions in range [-1,1].
Mesh CubeMesh()
{
  auto mesh = Mesh{};
  mesh.position_components = vector<float>{
    1.f, 1.f, -1.f,
    1.f, -1.f, 1.f,
    1.f, -1.f, -1.f,
    1.f, 1.f, 1.f,
    -1.f, -1.f, -1.f,
    -1.f, 1.f, -1.f,
    -1.f, 1.f, 1.f,
    -1.f, -1.f, 1.f
  };
  mesh.position_indices = vector<uint32_t>{
    0, 1, 2,  // X+
    1, 0, 3,
    6, 4, 7,  // X-
    4, 6, 5,
    6, 0, 5,  // Y+
    0, 6, 3,
    1, 4, 2,  // Y-
    4, 1, 7,
    1, 6, 7,  // Z+
    6, 1, 3,
    0, 4, 5,  // Z-
    4, 0, 2
  };
  mesh.position_components_per_vertex = 3;
  mesh.position_indices_per_face = 3;

  mesh.tex_coord_components = vector<float>{
    0.f, 0.f,
    1.f, 0.f,
    0.f, 1.f,
    1.f, 1.f
  };
  mesh.tex_coord_indices = vector<uint32_t>{
    0, 1, 2,
    1, 0, 3,
    0, 1, 2,
    1, 0, 3,
    0, 1, 2,
    1, 0, 3,
    0, 1, 2,
    1, 0, 3,
    0, 1, 2,
    1, 0, 3,
    0, 1, 2,
    1, 0, 3
  };
  mesh.tex_coord_components_per_vertex = 2;
  mesh.tex_coord_indices_per_face = 3;

  mesh.normal_components = vector<float>{
    1.f, 0.f, 0.f,
    -1.f, 0.f, 0.f,
    0.f, 1.f, 0.f,
    0.f, -1.f, 0.f,
    0.f, 0.f, 1.f,
    0.f, 0.f, -1.f
  };
  mesh.normal_indices = vector<uint32_t>{
    0, 0, 0,
    0, 0, 0,
    1, 1, 1,
    1, 1, 1,
    2, 2, 2,
    2, 2, 2,
    3, 3, 3,
    3, 3, 3,
    4, 4, 4,
    4, 4, 4,
    5, 5, 5,
    5, 5, 5
  };
  mesh.normal_indices_per_face = 3;

  return mesh;
}

} // namespace


TEST(WriteTest, PositionsOnly)
{
  // Arrange.
  const string expected_string =
    "# Generated by https://github.com/thinks/obj-io\n"
    "# Vertex count: 8\n"
    "# Face count: 12\n"
    "v 1 1 -1\n"
    "v 1 -1 1\n"
    "v 1 -1 -1\n"
    "v 1 1 1\n"
    "v -1 -1 -1\n"
    "v -1 1 -1\n"
    "v -1 1 1\n"
    "v -1 -1 1\n"
    "f 1 2 3\n"
    "f 2 1 4\n"
    "f 7 5 8\n"
    "f 5 7 6\n"
    "f 7 1 6\n"
    "f 1 7 4\n"
    "f 2 5 3\n"
    "f 5 2 8\n"
    "f 2 7 8\n"
    "f 7 2 4\n"
    "f 1 5 6\n"
    "f 5 1 3\n";
  const auto mesh = CubeMesh();
  auto ss = stringstream();

  // Act.
  Write(
    ss, 
    make_position_channel(
      mesh.position_components, mesh.position_components_per_vertex,
      mesh.position_indices, mesh.position_indices_per_face));

  // Assert.
  EXPECT_STREQ(expected_string.c_str(), ss.str().c_str());
}

TEST(WriteTest, PositionsAndTexCoords)
{
  // Arrange.
  const string expected_string =
    "# Generated by https://github.com/thinks/obj-io\n"
    "# Vertex count: 8\n"
    "# Face count: 12\n"
    "v 1 1 -1\n"
    "v 1 -1 1\n"
    "v 1 -1 -1\n"
    "v 1 1 1\n"
    "v -1 -1 -1\n"
    "v -1 1 -1\n"
    "v -1 1 1\n"
    "v -1 -1 1\n"
    "vt 0 0\n"
    "vt 1 0\n"
    "vt 0 1\n"
    "vt 1 1\n"
    "f 1/1 2/2 3/3\n"
    "f 2/2 1/1 4/4\n"
    "f 7/1 5/2 8/3\n"
    "f 5/2 7/1 6/4\n"
    "f 7/1 1/2 6/3\n"
    "f 1/2 7/1 4/4\n"
    "f 2/1 5/2 3/3\n"
    "f 5/2 2/1 8/4\n"
    "f 2/1 7/2 8/3\n"
    "f 7/2 2/1 4/4\n"
    "f 1/1 5/2 6/3\n"
    "f 5/2 1/1 3/4\n";
  const auto mesh = CubeMesh();
  auto ss = stringstream();

  // Act.
  Write(
    ss,
    make_position_channel(
      mesh.position_components, mesh.position_components_per_vertex,
      mesh.position_indices, mesh.position_indices_per_face),
    make_tex_coord_channel(
      mesh.tex_coord_components, mesh.tex_coord_components_per_vertex,
      mesh.tex_coord_indices, mesh.position_indices_per_face));

  // Assert.
  EXPECT_STREQ(expected_string.c_str(), ss.str().c_str());
}

TEST(WriteTest, PositionsAndNormals)
{
  // Arrange.
  const string expected_string =
    "# Generated by https://github.com/thinks/obj-io\n"
    "# Vertex count: 8\n"
    "# Face count: 12\n"
    "v 1 1 -1\n"
    "v 1 -1 1\n"
    "v 1 -1 -1\n"
    "v 1 1 1\n"
    "v -1 -1 -1\n"
    "v -1 1 -1\n"
    "v -1 1 1\n"
    "v -1 -1 1\n"
    "vn 1 0 0\n"
    "vn -1 0 0\n"
    "vn 0 1 0\n"
    "vn 0 -1 0\n"
    "vn 0 0 1\n"
    "vn 0 0 -1\n"
    "f 1//1 2//1 3//1\n"
    "f 2//1 1//1 4//1\n"
    "f 7//2 5//2 8//2\n"
    "f 5//2 7//2 6//2\n"
    "f 7//3 1//3 6//3\n"
    "f 1//3 7//3 4//3\n"
    "f 2//4 5//4 3//4\n"
    "f 5//4 2//4 8//4\n"
    "f 2//5 7//5 8//5\n"
    "f 7//5 2//5 4//5\n"
    "f 1//6 5//6 6//6\n"
    "f 5//6 1//6 3//6\n";
  const auto mesh = CubeMesh();
  auto ss = stringstream();

  // Act.
  Write(
    ss,
    make_position_channel(
      mesh.position_components, mesh.position_components_per_vertex,
      mesh.position_indices, mesh.position_indices_per_face),
    make_normal_channel(
      mesh.normal_components, 3,
      mesh.normal_indices, mesh.normal_indices_per_face));

  // Assert.
  EXPECT_STREQ(expected_string.c_str(), ss.str().c_str());
}

TEST(WriteTest, PositionsAndTexCoordsAndNormals)
{
  // Arrange.
  const string expected_string =
    "# Generated by https://github.com/thinks/obj-io\n"
    "# Vertex count: 8\n"
    "# Face count: 12\n"
    "v 1 1 -1\n"
    "v 1 -1 1\n"
    "v 1 -1 -1\n"
    "v 1 1 1\n"
    "v -1 -1 -1\n"
    "v -1 1 -1\n"
    "v -1 1 1\n"
    "v -1 -1 1\n"
    "vt 0 0\n"
    "vt 1 0\n"
    "vt 0 1\n"
    "vt 1 1\n"
    "vn 1 0 0\n"
    "vn -1 0 0\n"
    "vn 0 1 0\n"
    "vn 0 -1 0\n"
    "vn 0 0 1\n"
    "vn 0 0 -1\n"
    "f 1/1/1 2/2/1 3/3/1\n"
    "f 2/2/1 1/1/1 4/4/1\n"
    "f 7/1/2 5/2/2 8/3/2\n"
    "f 5/2/2 7/1/2 6/4/2\n"
    "f 7/1/3 1/2/3 6/3/3\n"
    "f 1/2/3 7/1/3 4/4/3\n"
    "f 2/1/4 5/2/4 3/3/4\n"
    "f 5/2/4 2/1/4 8/4/4\n"
    "f 2/1/5 7/2/5 8/3/5\n"
    "f 7/2/5 2/1/5 4/4/5\n"
    "f 1/1/6 5/2/6 6/3/6\n"
    "f 5/2/6 1/1/6 3/4/6\n";
  const auto mesh = CubeMesh();
  auto ss = stringstream();

  // Act.
  Write(
    ss,
    make_position_channel(
      mesh.position_components, mesh.position_components_per_vertex,
      mesh.position_indices, mesh.position_indices_per_face),
    make_tex_coord_channel(
      mesh.tex_coord_components, mesh.tex_coord_components_per_vertex,
      mesh.tex_coord_indices, mesh.position_indices_per_face),
    make_normal_channel(
      mesh.normal_components, 3,
      mesh.normal_indices, mesh.normal_indices_per_face));

  // Assert.
  EXPECT_STREQ(expected_string.c_str(), ss.str().c_str());
}

TEST(WriteTest, ThrowIfIndicesPerFaceNotEqualForAllChannels_TexCoords)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_tex_coord_channel(
        vector<float>{ 1.0f, 1.0f }, 2,
        vector<uint32_t>{ 0, 0, 0, 0}, 4));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "indices per face must be equal for all channels: "
      << "positions (" << 3 << "), tex_coords (" << 4 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}

TEST(WriteTest, ThrowIfIndicesPerFaceNotEqualForAllChannels_Normals)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_normal_channel(
        vector<float>{ 1.0f, 1.0f, 1.0f }, 3,
        vector<uint32_t>{ 0, 0, 0, 0}, 4));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "indices per face must be equal for all channels: "
      << "positions (" << 3 << "), normals (" << 4 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}

TEST(WriteTest, ThrowIfIndicesPerFaceNotEqualForAllChannels_TexCoordsAndNormals)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_tex_coord_channel(
        vector<float>{ 1.0f, 1.0f }, 2,
        vector<uint32_t>{ 0, 0, 0, 0, 0}, 5),
      make_normal_channel(
        vector<float>{ 1.0f, 1.0f, 1.0f }, 3,
        vector<uint32_t>{ 0, 0, 0, 0}, 4));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "indices per face must be equal for all channels: "
      << "positions (" << 3 << "), tex_coords (" << 5 
      << "), normals (" << 4 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}

TEST(WriteTest, ThrowIfIndexCountNotEqualForAllChannels_TexCoords)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_tex_coord_channel(
        vector<float>{ 1.0f, 1.0f }, 2,
        vector<uint32_t>{ 0, 0, 0, 0, 0, 0 }, 3));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "index count must be equal for all channels: "
      << "positions (" << 3 << "), tex_coords (" << 6 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}

TEST(WriteTest, ThrowIfIndexCountNotEqualForAllChannels_Normals)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_normal_channel(
        vector<float>{ 1.0f, 1.0f, 1.0f }, 3,
        vector<uint32_t>{ 0, 0, 0, 0, 0, 0 }, 3));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "index count must be equal for all channels: "
      << "positions (" << 3 << "), normals (" << 6 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}

TEST(WriteTest, ThrowIfIndexCountNotEqualForAllChannels_TexCoordsAndNormals)
{
  try {
    auto ss = stringstream();
    Write(
      ss,
      make_position_channel(
        vector<float>{ 1.0f, 2.0f, 3.0f }, 3,
        vector<uint32_t>{ 0, 0, 0}, 3),
      make_tex_coord_channel(
        vector<float>{ 1.0f, 1.0f }, 2,
        vector<uint32_t>{ 0, 0, 0, 0, 0, 0 }, 3),
      make_normal_channel(
        vector<float>{ 1.0f, 1.0f, 1.0f }, 3,
        vector<uint32_t>{ 0, 0, 0, 0, 0, 0 }, 3));
    FAIL() << "exception not thrown";
  }
  catch (invalid_argument& ex) {
    auto ss = stringstream();
    ss << "index count must be equal for all channels: "
      << "positions (" << 3 << "), tex_coords (" << 6
      << "), normals (" << 6 << ")";
    EXPECT_STREQ(ss.str().c_str(), ex.what());
  }
  catch (...) {
    FAIL() << "incorrect exception";
  }
}
